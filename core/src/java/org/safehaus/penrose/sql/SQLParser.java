/* Generated By:JavaCC: Do not edit this line. SQLParser.java */
package org.safehaus.penrose.sql;

import java.io.*;

public class SQLParser implements SQLParserConstants {

    boolean inSQL;
    boolean inSelect;
    boolean inProcedure;
    Formatter fout = new Formatter();
    VariableList varList = new VariableList();

    public String getQuery() {
        return fout.toString();
    }

/*******************************************************************
 * The PL-SQL grammar starts here
 *******************************************************************/
  final public SQLAndExpr SQLAndExpr() throws ParseException {
  String rs = "", ts;
  SQLAndExpr andExpr = new SQLAndExpr();
  SQLNotExpr notExpr;
    notExpr = SQLNotExpr();
    ts = notExpr.toString();
    rs = rs + ts;
    andExpr.addChild(notExpr);
    label_1:
    while (true) {
      if (jj_2_1(10)) {
        ;
      } else {
        break label_1;
      }
      jj_consume_token(AND);
          rs = rs + fout.println();
          rs = rs + fout.printRj("AND ");
      notExpr = SQLNotExpr();
      ts = notExpr.toString();
      rs = rs + ts;
      andExpr.addChild(notExpr);
    }
    {if (true) return andExpr;}
    throw new Error("Missing return statement in function");
  }

  final public String SQLBetweenClause() throws ParseException {
  String rs = new String(""), ts;
    if (jj_2_2(10)) {
      jj_consume_token(NOT);
            rs = rs + fout.print(" NOT");
    } else {
      ;
    }
    jj_consume_token(BETWEEN);
              rs = rs + fout.print(" BETWEEN ");
    ts = SQLSumExpr();
                      rs = rs + ts;
    jj_consume_token(AND);
          rs = rs + fout.print(" AND ");
    ts = SQLSumExpr();
                      rs = rs + ts;
    {if (true) return rs;}
    throw new Error("Missing return statement in function");
  }

  final public String SQLColRef() throws ParseException {
 Token aliasName, columnName;
 String s, rs = new String("");
    s = SQLLvalue();
          rs = rs + fout.print(s); {if (true) return rs;}
    throw new Error("Missing return statement in function");
  }

  final public SQLCompareExpr SQLCompareExpr() throws ParseException {
  String rs = "", ts;
  SQLCompareExpr compareExpr = new SQLCompareExpr();
  SQLCompareExprRight compareExprRight;
  SQLSelect select;
  SQLIsClause isClause;
    if (jj_2_4(2147483647)) {
      select = SQLSelect();
      ts = select.toString();
      rs = rs + ts;
      compareExpr.addChild(select);
    } else if (jj_2_5(2147483647)) {
      ts = SQLIsClause();
      rs = rs + ts;
      compareExpr.addChild(ts);
    } else if (jj_2_6(2147483647)) {
      ts = SQLExistsClause();
      rs = rs + ts;
      compareExpr.addChild(ts);
    } else if (jj_2_7(10)) {
      ts = SQLSumExpr();
      rs = rs + ts;
      compareExpr.addChild(ts);
      if (jj_2_3(10)) {
        compareExprRight = SQLCompareExprRight();
        ts = compareExprRight.toString();
        rs = rs + ts;
        compareExpr.addChild(compareExprRight);
      } else {
        ;
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return compareExpr;}
    throw new Error("Missing return statement in function");
  }

  final public SQLCompareExprRight SQLCompareExprRight() throws ParseException {
  String rs = "", ts;
  SQLCompareExprRight compareExprRight = new SQLCompareExprRight();
  SQLCompareOp compareOp;
  SQLLikeClause likeClause;
    if (jj_2_8(2)) {
      likeClause = SQLLikeClause();
      rs = rs + likeClause.toString();
      compareExprRight.addChild(likeClause);
    } else if (jj_2_9(2)) {
      ts = SQLInClause();
      rs = rs + ts;
      compareExprRight.addChild(ts);
    } else if (jj_2_10(10)) {
      ts = SQLLeftJoinClause();
      rs = rs + ts;
      compareExprRight.addChild(ts);
    } else if (jj_2_11(2147483647)) {
      ts = SQLRightJoinClause();
      rs = rs + ts;
      compareExprRight.addChild(ts);
    } else if (jj_2_12(2)) {
      ts = SQLBetweenClause();
      rs = rs + ts;
      compareExprRight.addChild(ts);
    } else if (jj_2_13(10)) {
      compareOp = SQLCompareOp();
      ts = compareOp.toString();
      rs = rs + ts;
      compareExprRight.addChild(ts);
      ts = SQLSumExpr();
      rs = rs + ts;
      compareExprRight.addChild(ts);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return compareExprRight;}
    throw new Error("Missing return statement in function");
  }

  final public SQLCompareOp SQLCompareOp() throws ParseException {
  String rs = "";
  SQLCompareOp compareOp = new SQLCompareOp();
    if (jj_2_14(10)) {
      jj_consume_token(EQUAL);
      rs = rs + fout.print(" = ");
      compareOp.setOperator("=");
    } else if (jj_2_15(10)) {
      jj_consume_token(NOTEQUAL);
      rs = rs + fout.print(" != ");
      compareOp.setOperator("!=");
    } else if (jj_2_16(10)) {
      jj_consume_token(NOTEQUAL2);
      rs = rs + fout.print(" != ");
      compareOp.setOperator("!=");
    } else if (jj_2_17(10)) {
      jj_consume_token(GREATER);
      rs = rs + fout.print(" > ");
      compareOp.setOperator(">");
    } else if (jj_2_18(10)) {
      jj_consume_token(GREATEREQUAL);
      rs = rs + fout.print(" >= ");
      compareOp.setOperator(">=");
    } else if (jj_2_19(10)) {
      jj_consume_token(LESS);
      rs = rs + fout.print(" < ");
      compareOp.setOperator("<");
    } else if (jj_2_20(10)) {
      jj_consume_token(LESSEQUAL);
      rs = rs + fout.print(" <= ");
      compareOp.setOperator("<=");
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return compareOp;}
    throw new Error("Missing return statement in function");
  }

  final public String SQLCursorArgs() throws ParseException {
  String rs = new String(""), ts;
    jj_consume_token(OPENPAREN);
    if (jj_2_28(10)) {
      if (jj_2_22(10)) {
        SQLColRef();
        if (jj_2_21(10)) {
          SQLDataType();
        } else {
          ;
        }
      } else if (jj_2_23(10)) {
        SQLFunction();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_2:
      while (true) {
        if (jj_2_24(10)) {
          ;
        } else {
          break label_2;
        }
        jj_consume_token(132);
        if (jj_2_26(10)) {
          SQLColRef();
          if (jj_2_25(10)) {
            SQLDataType();
          } else {
            ;
          }
        } else if (jj_2_27(10)) {
          SQLFunction();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } else {
      ;
    }
    jj_consume_token(CLOSEPAREN);
        {if (true) return rs;}
    throw new Error("Missing return statement in function");
  }

  final public String SQLCursorClose() throws ParseException {
  Token cursorName;
  String rs = new String("");
    jj_consume_token(CLOSE);
    cursorName = jj_consume_token(ID);
          rs = rs + fout.print("Exec SQL Close ");
          rs = rs + fout.print(TitleCaseString.fixCase(cursorName.image));
    {if (true) return rs;}
    throw new Error("Missing return statement in function");
  }

  final public void SQLCursorDeclare() throws ParseException {
  Token x, y;
  String rs = new String(""), ts;
  SQLSelect select;
    jj_consume_token(CURSOR);
    x = jj_consume_token(ID);
          fout.indent();
          rs = rs + fout.println("EXEC SQL");
          fout.indent();
          rs = rs + fout.print("Declare ");
          String s = TitleCaseString.fixCase(x.image);
          rs = rs + fout.print(s);
          rs = rs + fout.println(" Cursor For");
          fout.indent();
    if (jj_2_29(10)) {
      ts = SQLCursorArgs();
                           rs = rs + fout.println();
    } else {
      ;
    }
    jj_consume_token(IS);
    select = SQLSelect();
    jj_consume_token(SEMICOLON);
    ts = select.toString();
    rs = rs + fout.print(ts);
    rs = rs + fout.println(";");
    fout.outdent();
    fout.outdent();
    fout.outdent();
        fout.print(rs); // out

  }

  final public String SQLCursorFetch() throws ParseException {
  String rs = new String(""), ts;
  SQLSelectCols selectCols;
    jj_consume_token(FETCH);
    rs = rs + fout.print("Exec SQL FETCH ");
    fout.align();
    inSelect = true;
    selectCols = SQLSelectCols();
    ts = selectCols.toString();
    rs = rs + ts;
    inSelect = false;
    if (jj_2_30(10)) {
      jj_consume_token(INTO);
          inSQL = true;
          rs = rs + fout.println();
          rs = rs + fout.printRj("INTO ");
      selectCols = SQLSelectCols();
      ts = selectCols.toString();
          rs = rs + ts;
          fout.outalign();
    } else {
      ;
    }
          inSQL = false ; {if (true) return rs;}
    throw new Error("Missing return statement in function");
  }

  final public String SQLCursorOpen() throws ParseException {
  Token cursorName;
  String rs = new String(""), ts;
    jj_consume_token(OPEN);
    cursorName = jj_consume_token(ID);
          rs = rs + fout.print("Exec SQL Open ");
          rs = rs + fout.print(TitleCaseString.fixCase(cursorName.image));
    if (jj_2_31(10)) {
      ts = SQLCursorArgs();
    } else {
      ;
    }
    {if (true) return rs;}
    throw new Error("Missing return statement in function");
  }

  final public DataType SQLDataType() throws ParseException {
 Token x;
 int size = 0;
    if (jj_2_37(10)) {
      jj_consume_token(INTEGER);
          {if (true) return new IntegerDataType();}
    } else if (jj_2_38(10)) {
      jj_consume_token(SMALLINT);
          {if (true) return new IntegerDataType();}
    } else if (jj_2_39(10)) {
      jj_consume_token(NUMBER);
               size = 0;
      if (jj_2_32(10)) {
        jj_consume_token(OPENPAREN);
        x = jj_consume_token(INTEGER_LITERAL);
        jj_consume_token(CLOSEPAREN);
                                               size = Integer.valueOf(x.image).intValue();
      } else {
        ;
      }
          {if (true) return new NumberDataType(size);}
    } else if (jj_2_40(10)) {
      if (jj_2_33(10)) {
        jj_consume_token(CHAR);
      } else if (jj_2_34(10)) {
        jj_consume_token(CHARACTER);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
                             size = 1;
      if (jj_2_35(10)) {
        jj_consume_token(OPENPAREN);
        x = jj_consume_token(INTEGER_LITERAL);
        jj_consume_token(CLOSEPAREN);
                                               size = Integer.valueOf(x.image).intValue();
      } else {
        ;
      }
          {if (true) return new CharDataType(size);}
    } else if (jj_2_41(10)) {
      jj_consume_token(VARCHAR2);
                 size = 1;
      if (jj_2_36(10)) {
        jj_consume_token(OPENPAREN);
        x = jj_consume_token(INTEGER_LITERAL);
        jj_consume_token(CLOSEPAREN);
                                               size = Integer.valueOf(x.image).intValue();
      } else {
        ;
      }
          {if (true) return new CharDataType(size);}
    } else if (jj_2_42(10)) {
      jj_consume_token(BOOLEAN);
          {if (true) return new BooleanDataType();}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String SQLDelete() throws ParseException {
  String rs = new String(""), ts;
  SQLTableList tableList;
  SQLWhere where;
    jj_consume_token(DELETE);
    jj_consume_token(FROM);
        if (inProcedure) rs = rs + fout.print("Exec SQL ");
        rs = rs + fout.print("DELETE FROM ");
    fout.align();
        inSQL = true;
    tableList = SQLTableList();
    ts = tableList.toString();
    rs = rs + ts;
    if (jj_2_43(10)) {
      where = SQLWhere();
      ts = where.toString();
      rs = rs + ts;
    } else {
      ;
    }
    fout.outalign();
        inSQL = false;
    {if (true) return rs;}
    throw new Error("Missing return statement in function");
  }

  final public String SQLExistsClause() throws ParseException {
  String rs = new String(""), ts;
  SQLSelect select;
    jj_consume_token(EXISTS);
    rs = rs + fout.print("EXISTS (");
    fout.align();
    jj_consume_token(OPENPAREN);
    select = SQLSelect();
    ts = select.toString();
    rs = rs + ts;
    jj_consume_token(CLOSEPAREN);
    rs = rs + fout.print(")");
    fout.outalign();
    {if (true) return rs;}
    throw new Error("Missing return statement in function");
  }

  final public String SQLFunction() throws ParseException {
  Token otherFunction;
  String rs = new String(""), ts;
    if (jj_2_44(10)) {
      jj_consume_token(UPPER);
              rs = rs + fout.print("UPPER");
      ts = SQLFunctionArgs();
                             rs = rs + ts;
    } else if (jj_2_45(10)) {
      jj_consume_token(MAX);
            rs = rs + fout.print("MAX");
      ts = SQLFunctionArgs();
                             rs = rs + ts;
    } else if (jj_2_46(10)) {
      jj_consume_token(MIN);
            rs = rs + fout.print("MIN");
      ts = SQLFunctionArgs();
                             rs = rs + ts;
    } else if (jj_2_47(10)) {
      jj_consume_token(SUM);
            rs = rs + fout.print("SUM");
      ts = SQLFunctionArgs();
                             rs = rs + ts;
    } else if (jj_2_48(10)) {
      jj_consume_token(COUNT);
              rs = rs + fout.print("COUNT");
      ts = SQLFunctionArgs();
                             rs = rs + ts;
    } else if (jj_2_49(10)) {
      jj_consume_token(LPAD);
             rs = rs + fout.print("<<<LPAD>>>");
      ts = SQLFunctionArgs();
                             rs = rs + ts;
    } else if (jj_2_50(10)) {
      jj_consume_token(LTRIM);
              rs = rs + fout.print("<<<LTRIM>>>");
      ts = SQLFunctionArgs();
                             rs = rs + ts;
    } else if (jj_2_51(10)) {
      jj_consume_token(RTRIM);
              rs = rs + fout.print("<<<RTRIM>>>");
      ts = SQLFunctionArgs();
                             rs = rs + ts;
    } else if (jj_2_52(10)) {
      jj_consume_token(LENGTH);
               rs = rs + fout.print("<<<LENGTH>>>");
      ts = SQLFunctionArgs();
                             rs = rs + ts;
    } else if (jj_2_53(10)) {
      jj_consume_token(REPLACE);
                rs = rs + fout.print("<<<REPLACE>>>");
      ts = SQLFunctionArgs();
                             rs = rs + ts;
    } else if (jj_2_54(10)) {
      jj_consume_token(SUBSTR);
               rs = rs + fout.print(" <<<SUBSTR>>> ");
      ts = SQLFunctionArgs();
                             rs = rs + ts;
    } else if (jj_2_55(10)) {
      jj_consume_token(TO_CHAR);
                rs = rs + fout.print(" <<<TO_CHAR>>> ");
      ts = SQLFunctionArgs();
                             rs = rs + ts;
    } else if (jj_2_56(10)) {
      jj_consume_token(TO_NUMBER);
                  rs = rs + fout.print(" <<<TO_NUMBER>>> ");
      ts = SQLFunctionArgs();
                             rs = rs + ts;
    } else if (jj_2_57(3)) {
      jj_consume_token(ORIGINPLUS);
      jj_consume_token(DOT);
      jj_consume_token(CONVERT_TIMESTAMP_TO_DATE);
                                                                  rs = rs + fout.print(" <<<ORIGINPLUS.ConvertTimeStampToDate>>> ");
      ts = SQLFunctionArgs();
                             rs = rs + ts;
    } else if (jj_2_58(3)) {
      jj_consume_token(ORIGINPLUS);
      jj_consume_token(DOT);
      jj_consume_token(FORMAT_AUDIT_HEADER);
                                                            rs = rs + fout.print(" <<<ORIGINPLUS.FormatAuditHeaderString>>> ");
      ts = SQLFunctionArgs();
                             rs = rs + ts;
    } else if (jj_2_59(3)) {
      jj_consume_token(ORIGINPLUS);
      jj_consume_token(DOT);
      jj_consume_token(FORMAT_ATTRIBUTE_SUBSTRING);
                                                                   rs = rs + fout.print(" <<<ORIGINPLUS.FormatAttributeSubString>>> ");
      ts = SQLFunctionArgs();
                             rs = rs + ts;
    } else if (jj_2_60(3)) {
      jj_consume_token(ORIGINPLUS);
      jj_consume_token(DOT);
      jj_consume_token(GET_CURRENT_TIMESTAMP);
                                                              rs = rs + fout.print(" <<<ORIGINPLUS.GetCurrentTimeStamp>>> ");
    } else if (jj_2_61(2147483647)) {
      otherFunction = jj_consume_token(ID);
          rs = rs + fout.print("<<<");
          rs = rs + fout.print(otherFunction.image);
          rs = rs + fout.print(">>>");
      ts = SQLFunctionArgs();
                             rs = rs + ts;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return rs;}
    throw new Error("Missing return statement in function");
  }

  final public String SQLFunctionArgs() throws ParseException {
  String rs = new String(""), ts;
    jj_consume_token(OPENPAREN);
        rs = rs + fout.print("(");
    if (jj_2_63(10)) {
      ts = SQLSumExpr();
                        rs = rs + ts;
      label_3:
      while (true) {
        if (jj_2_62(10)) {
          ;
        } else {
          break label_3;
        }
        jj_consume_token(132);
            rs = rs + fout.print(", ");
        ts = SQLSumExpr();
                              rs = rs + ts;
      }
    } else {
      ;
    }
    jj_consume_token(CLOSEPAREN);
        rs = rs + fout.print(")"); {if (true) return rs;}
    throw new Error("Missing return statement in function");
  }

  final public String SQLGroupBy() throws ParseException {
  String rs = new String(""), ts;
    jj_consume_token(GROUP);
    jj_consume_token(BY);
                 rs = rs + fout.println();
                 rs = rs + fout.printRj("GROUP ");
                 rs = rs + fout.print("BY ");
    ts = SQLOrderByList();
                          rs = rs + ts;
    {if (true) return rs;}
    throw new Error("Missing return statement in function");
  }

  final public String SQLInClause() throws ParseException {
  String rs = new String(""), ts;
    if (jj_2_64(10)) {
      jj_consume_token(NOT);
            rs = rs + fout.print(" NOT");
    } else {
      ;
    }
    jj_consume_token(IN);
         rs = rs + fout.print(" IN ");
    jj_consume_token(OPENPAREN);
        rs = rs + fout.print("(");
    ts = SQLLValueList();
                         rs = rs + ts;
    jj_consume_token(CLOSEPAREN);
        rs = rs + fout.print(")");
    {if (true) return rs;}
    throw new Error("Missing return statement in function");
  }

  final public String SQLInsert() throws ParseException {
  String rs = new String(""), ts;
  SQLTableList tableList;
  SQLSelectCols selectCols;
    jj_consume_token(INSERT);
    jj_consume_token(INTO);
            if (inProcedure) rs = rs + fout.print("Exec SQL ");
            rs = rs + fout.print("INSERT INTO ");
          fout.align();
    tableList = SQLTableList();
    ts = tableList.toString();
    rs = rs + ts;
    if (jj_2_65(10)) {
      jj_consume_token(OPENPAREN);
          rs = rs + fout.print("(");
          inSelect = true;
      selectCols = SQLSelectCols();
      ts = selectCols.toString();
      rs = rs + ts;
      jj_consume_token(CLOSEPAREN);
          rs = rs + fout.print(")");
          inSelect = false;
      jj_consume_token(VALUES);
          rs = rs + fout.print(") VALUES");
    } else {
      ;
    }
    jj_consume_token(OPENPAREN);
          rs = rs + fout.print(" (");
          inSQL = true;
    selectCols = SQLSelectCols();
    ts = selectCols.toString();
    rs = rs + ts;
    jj_consume_token(CLOSEPAREN);
          rs = rs + fout.print(")");
          inSelect = false;
      fout.outalign();
          {if (true) return rs;}
    throw new Error("Missing return statement in function");
  }

  final public String SQLIsClause() throws ParseException {
  String rs = new String(""), ts;
    ts = SQLColRef();
                     rs = rs + ts;
    jj_consume_token(IS);
         rs = rs + fout.print(" IS");
    if (jj_2_66(10)) {
      jj_consume_token(NOT);
            rs = rs + fout.print(" NOT");
    } else {
      ;
    }
    jj_consume_token(NULL);
           rs = rs + fout.print(" NULL");
    {if (true) return rs;}
    throw new Error("Missing return statement in function");
  }

  final public String SQLLeftJoinClause() throws ParseException {
  Token theComparison;
  String rs = new String(""), ts;
  SQLCompareOp compareOp;
    jj_consume_token(JOINPLUS);
    compareOp = SQLCompareOp();
          ts = compareOp.toString();
          rs = rs + ts;
          rs = rs + fout.print("* ");
    ts = SQLSumExpr();
                      rs = rs + ts;
    {if (true) return rs;}
    throw new Error("Missing return statement in function");
  }

  final public SQLLikeClause SQLLikeClause() throws ParseException {
  SQLLikeClause likeClause = new SQLLikeClause();
  String rs = "";
  String ts;
    if (jj_2_67(10)) {
      jj_consume_token(NOT);
      rs = rs + fout.print(" NOT");
      likeClause.setNot(true);
    } else {
      ;
    }
    jj_consume_token(LIKE);
    rs = rs + fout.print(" LIKE ");
    ts = SQLPattern();
    rs = rs + ts;
    likeClause.setPattern(ts);
    {if (true) return likeClause;}
    throw new Error("Missing return statement in function");
  }

  final public String SQLLiteral() throws ParseException {
 Token x;
 String rs = new String("");
    if (jj_2_70(10)) {
      x = jj_consume_token(STRING_LITERAL);
                           rs = rs + fout.print(x.image);
    } else if (jj_2_71(10)) {
      x = jj_consume_token(INTEGER_LITERAL);
                            rs = rs + fout.print(x.image);
    } else if (jj_2_72(10)) {
      x = jj_consume_token(FLOATING_POINT_LITERAL);
                                   rs = rs + fout.print(x.image);
    } else if (jj_2_73(10)) {
      if (jj_2_68(10)) {
        jj_consume_token(ZEROS);
      } else if (jj_2_69(10)) {
        jj_consume_token(ZERO);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
                         rs = rs + fout.print("0");
    } else if (jj_2_74(10)) {
      jj_consume_token(SPACES);
               rs = rs + fout.print("<<<SPACES>>>");
    } else if (jj_2_75(10)) {
      x = jj_consume_token(ASTERISK);
                     rs = rs + fout.print(x.image);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return rs;}
    throw new Error("Missing return statement in function");
  }

  final public String SQLLvalue() throws ParseException {
  Token x, y;
  String s = new String(""), t;
    if (jj_2_76(10)) {
      jj_consume_token(REQUEST);
      jj_consume_token(DOT);
          s = s + ":";
          s = s + "Request->";
      t = SQLLvalueTerm();
          s = s + t;
    } else if (jj_2_77(10)) {
      jj_consume_token(REPLY_REPEATING_GROUP);
      jj_consume_token(DOT);
          s = s + ":";
          s = s + "ReplyRepeatingGroup->";
      t = SQLLvalueTerm();
          s = s + t;
    } else if (jj_2_78(10)) {
      jj_consume_token(REPLY);
      jj_consume_token(DOT);
          s = s + ":";
          s = s + "Reply->";
      t = SQLLvalueTerm();
          s = s + t;
    } else if (jj_2_79(10)) {
      jj_consume_token(SQL_I_O_CORRECT);
          s = s + "SQL_I_O_CORRECT";
    } else if (jj_2_80(10)) {
      jj_consume_token(ROW_NOT_FOUND);
          s = s + "ROW_NOT_FOUND";
    } else if (jj_2_81(10)) {
      t = SQLLvalueTerm();
          s = s + t;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public String SQLLvalueTerm() throws ParseException {
  Token x, y;
  String s = new String("");
    x = jj_consume_token(ID);
          s = varList.nameOf(x.image);
// Change to :Pr_ and substring(4) after creating nameOfSql	  
          if (s.startsWith("Pr_")) {
                s = ":Request->" + s.substring(3);
          }
    label_4:
    while (true) {
      if (jj_2_82(10)) {
        ;
      } else {
        break label_4;
      }
      jj_consume_token(DOT);
      y = jj_consume_token(ID);
                  s = s + ".";
                  s = s + TitleCaseString.fixCase(y.image);
    }
          {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public SQLNotExpr SQLNotExpr() throws ParseException {
  String rs = "", ts;
  SQLNotExpr notExpr = new SQLNotExpr();
  SQLCompareExpr compareExpr;
    if (jj_2_83(10)) {
      jj_consume_token(NOT);
          rs = rs + fout.print("NOT ");
          notExpr.setNot(true);
    } else {
      ;
    }
    compareExpr = SQLCompareExpr();
    ts = compareExpr.toString();
    rs = rs + ts;
    notExpr.setChild(compareExpr);
    {if (true) return notExpr;}
    throw new Error("Missing return statement in function");
  }

  final public String SQLOrderBy() throws ParseException {
  String rs = new String(""), ts;
    jj_consume_token(ORDER);
    jj_consume_token(BY);
                 rs = rs + fout.println();
                 rs = rs + fout.printRj("ORDER ");
                 rs = rs + fout.print("BY ");
    ts = SQLOrderByList();
                          rs = rs + ts;
    {if (true) return rs;}
    throw new Error("Missing return statement in function");
  }

  final public String SQLOrderByElem() throws ParseException {
  String rs = new String(""), ts;
    ts = SQLColRef();
                     rs = rs + ts;
    if (jj_2_84(10)) {
      ts = SQLOrderDirection();
                               rs = rs + ts;
    } else {
      ;
    }
    {if (true) return rs;}
    throw new Error("Missing return statement in function");
  }

  final public String SQLOrderByList() throws ParseException {
  String rs = new String(""), ts;
    ts = SQLOrderByElem();
                          rs = rs + ts;
    label_5:
    while (true) {
      if (jj_2_85(2)) {
        ;
      } else {
        break label_5;
      }
      jj_consume_token(132);
          rs = rs + fout.println(", ");
      ts = SQLOrderByElem();
                            rs = rs + ts;
    }
    {if (true) return rs;}
    throw new Error("Missing return statement in function");
  }

  final public String SQLOrderDirection() throws ParseException {
  String rs = new String("");
    if (jj_2_86(10)) {
      jj_consume_token(ASC);
            rs = rs + fout.print(" ASC");
    } else if (jj_2_87(10)) {
      jj_consume_token(DESC);
             rs = rs + fout.print(" DESC");
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return rs;}
    throw new Error("Missing return statement in function");
  }

  final public SQLOrExpr SQLOrExpr() throws ParseException {
  String rs = "", ts;
  SQLOrExpr orExpr = new SQLOrExpr();
  SQLAndExpr andExpr;
    andExpr = SQLAndExpr();
    ts = andExpr.toString();
    rs = rs + ts;
    orExpr.addChild(andExpr);
    label_6:
    while (true) {
      if (jj_2_88(10)) {
        ;
      } else {
        break label_6;
      }
      jj_consume_token(OR);
          rs = rs + fout.println();
          rs = rs + fout.printRj("OR ");
      andExpr = SQLAndExpr();
      ts = andExpr.toString();
      rs = rs + ts;
      orExpr.addChild(andExpr);
    }
    {if (true) return orExpr;}
    throw new Error("Missing return statement in function");
  }

  final public String SQLPattern() throws ParseException {
 Token x;
 String rs = new String(""), ts;
    if (jj_2_89(10)) {
      x = jj_consume_token(STRING_LITERAL);
                           rs = rs + fout.print(x.image);
    } else if (jj_2_90(10)) {
      jj_consume_token(QUESTIONMARK);
          rs = rs + fout.print("?");
    } else if (jj_2_91(10)) {
      jj_consume_token(USER);
             rs = rs + fout.print("USER");
    } else if (jj_2_92(10)) {
      ts = SQLLvalue();
                       rs = rs + ts;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return rs;}
    throw new Error("Missing return statement in function");
  }

  final public String SQLProductExpr() throws ParseException {
  String rs = new String(""), ts;
    ts = SQLUnaryExpr();
                        rs = rs + ts;
    label_7:
    while (true) {
      if (jj_2_93(10)) {
        ;
      } else {
        break label_7;
      }
      if (jj_2_94(10)) {
        jj_consume_token(ASTERISK);
            rs = rs + fout.print(" * ");
      } else if (jj_2_95(10)) {
        jj_consume_token(SLASH);
            rs = rs + fout.print(" / ");
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      ts = SQLUnaryExpr();
                            rs = rs + ts;
    }
    {if (true) return rs;}
    throw new Error("Missing return statement in function");
  }

  final public String SQLRightJoinClause() throws ParseException {
  Token theComparison;
  String rs = "", ts;
  SQLCompareOp compareOp;
    rs = rs + fout.print("*");
    compareOp = SQLCompareOp();
    ts = compareOp.toString();
    rs = rs + ts;
    ts = SQLSumExpr();
                      rs = rs + ts;
    jj_consume_token(JOINPLUS);
    {if (true) return rs;}
    throw new Error("Missing return statement in function");
  }

  final public SQLSelect SQLSelect() throws ParseException {
  String rs = new String(""), ts;
  SQLSelect select = new SQLSelect();
  SQLSelectCols selectCols;
  SQLTableList tableList;
  SQLWhere where;
    jj_consume_token(SELECT);
        if (inProcedure) rs = rs + fout.print("Exec SQL ");
        rs = rs + fout.print("SELECT ");
        fout.align();
        inSelect = true;
    selectCols = SQLSelectCols();
    ts = selectCols.toString();
    rs = rs + ts;
    inSelect = false;
    if (jj_2_96(10)) {
      jj_consume_token(INTO);
      rs = rs + fout.println();
      rs = rs + fout.printRj("INTO ");
          inSQL = true;
      selectCols = SQLSelectCols();
          ts = selectCols.toString();
          rs = rs + ts;
          inSQL = false;
    } else {
      ;
    }
    jj_consume_token(FROM);
    rs = rs + fout.println();
    rs = rs + fout.printRj("FROM ");
    tableList = SQLTableList();
    ts = tableList.toString();
    rs = rs + ts;
    select.setTableList(tableList);
    if (jj_2_97(10)) {
      where = SQLWhere();
      ts = where.toString();
      rs = rs + ts;
      select.setWhere(where);
    } else {
      ;
    }
    if (jj_2_98(10)) {
      ts = SQLGroupBy();
      rs = rs + ts;
    } else {
      ;
    }
    if (jj_2_99(10)) {
      ts = SQLOrderBy();
      rs = rs + ts;
    } else {
      ;
    }
    fout.outalign();
    select.setString(rs);
    {if (true) return select;}
    throw new Error("Missing return statement in function");
  }

  final public SQLSelectCols SQLSelectCols() throws ParseException {
  String rs = new String(""), ts;
  SQLSelectCols selectCols = new SQLSelectCols();
    label_8:
    while (true) {
      if (jj_2_100(10)) {
        ;
      } else {
        break label_8;
      }
      if (jj_2_101(10)) {
        jj_consume_token(ALL);
      rs = rs + fout.print("ALL ");
      } else if (jj_2_102(10)) {
        jj_consume_token(DISTINCT);
      rs = rs + fout.print("DISTINCT ");
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    if (jj_2_105(10)) {
      if (jj_2_103(10)) {
        jj_consume_token(ASTERISK);
      rs = rs + fout.print("*");
      } else if (jj_2_104(10)) {
        ts = SQLSelectList();
        rs = rs + ts;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
    selectCols.setString(rs);
    {if (true) return selectCols;}
    throw new Error("Missing return statement in function");
  }

  final public String SQLSelectList() throws ParseException {
  String rs = new String(""), ts;
    ts = SQLSumExpr();
                      rs = rs + ts;
    label_9:
    while (true) {
      if (jj_2_106(10)) {
        ;
      } else {
        break label_9;
      }
      jj_consume_token(132);
          rs = rs + fout.println();
          rs = rs + fout.printRj(", ");
      ts = SQLSumExpr();
                        rs = rs + ts;
    }
    {if (true) return rs;}
    throw new Error("Missing return statement in function");
  }

  final public String SQLStatement() throws ParseException {
  String rs = new String(""), ts;
  SQLSelect select;
    if (jj_2_107(10)) {
      select = SQLSelect();
      ts = select.toString();
      rs = rs + ts;
    } else if (jj_2_108(10)) {
      ts = SQLInsert();
                       rs = rs + ts;
    } else if (jj_2_109(10)) {
      ts = SQLUpdate();
                       rs = rs + ts;
    } else if (jj_2_110(10)) {
      ts = SQLDelete();
                       rs = rs + ts;
    } else if (jj_2_111(10)) {
      ts = SQLCursorOpen();
                           rs = rs + ts;
    } else if (jj_2_112(10)) {
      ts = SQLCursorFetch();
                            rs = rs + ts;
    } else if (jj_2_113(10)) {
      ts = SQLCursorClose();
                            rs = rs + ts;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SEMICOLON);
          rs = rs + fout.println(";") ;
          {if (true) return rs;}
    throw new Error("Missing return statement in function");
  }

  final public String SQLSumExpr() throws ParseException {
  String rs = "", ts;
    ts = SQLProductExpr();
    rs = rs + ts;
    label_10:
    while (true) {
      if (jj_2_114(2)) {
        ;
      } else {
        break label_10;
      }
      if (jj_2_115(10)) {
        jj_consume_token(PLUS);
        rs = rs + fout.print(" + ");
      } else if (jj_2_116(10)) {
        jj_consume_token(MINUS);
        rs = rs + fout.print(" - ");
      } else if (jj_2_117(10)) {
        jj_consume_token(CONCAT);
        rs = rs + fout.print(" + ");
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      ts = SQLProductExpr();
      rs = rs + ts;
    }
    {if (true) return rs;}
    throw new Error("Missing return statement in function");
  }

  final public SQLTableList SQLTableList() throws ParseException {
  String rs = new String(""), ts;
  SQLTableList tableList = new SQLTableList();
  SQLTableRef tableRef;
    tableRef = SQLTableRef();
    ts = tableRef.toString();
    rs = rs + ts;
    tableList.addTableRef(tableRef);
    label_11:
    while (true) {
      if (jj_2_118(2)) {
        ;
      } else {
        break label_11;
      }
      jj_consume_token(132);
      rs = rs + fout.println(", ");
      tableRef = SQLTableRef();
      ts = tableRef.toString();
      rs = rs + ts;
      tableList.addTableRef(tableRef);
    }
    tableList.setString(rs);
    {if (true) return tableList;}
    throw new Error("Missing return statement in function");
  }

  final public SQLTableRef SQLTableRef() throws ParseException {
  Token tableName, aliasName;
  String rs = new String("");
  SQLTableRef tableRef = new SQLTableRef();
    tableName = jj_consume_token(ID);
    rs = rs + fout.print(TitleCaseString.fixCase(tableName.image));
    tableRef.setTableName(tableName.image);
    if (jj_2_119(10)) {
      aliasName = jj_consume_token(ID);
      rs = rs + fout.print(" ");
      rs = rs + fout.print(TitleCaseString.fixCase(aliasName.image));
      tableRef.setAliasName(aliasName.image);
    } else {
      ;
    }
    {if (true) return tableRef;}
    throw new Error("Missing return statement in function");
  }

  final public String SQLTerm() throws ParseException {
  Token other;
  String rs = new String(""), ts;
  SQLOrExpr orExpr;
    if (jj_2_120(10)) {
      jj_consume_token(OPENPAREN);
      rs = rs + fout.print("(");
      fout.align();
      orExpr = SQLOrExpr();
      ts = orExpr.toString();
      rs = rs + ts;
      jj_consume_token(CLOSEPAREN);
      rs = rs + fout.print(")");
      fout.outalign();
    } else if (jj_2_121(10)) {
      ts = SQLColRef();
      rs = rs + ts;
    } else if (jj_2_122(10)) {
      ts = SQLLiteral();
      rs = rs + ts;
    } else if (jj_2_123(10)) {
      ts = SQLFunction();
      rs = rs + ts;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return rs;}
    throw new Error("Missing return statement in function");
  }

  final public String SQLUnaryExpr() throws ParseException {
  String rs = new String(""), ts;
    if (jj_2_126(10)) {
      if (jj_2_124(10)) {
        jj_consume_token(PLUS);
            rs = rs + fout.print("+");
      } else if (jj_2_125(10)) {
        jj_consume_token(MINUS);
            rs = rs + fout.print("-");
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
    ts = SQLTerm();
                     rs = rs + ts;
    {if (true) return rs;}
    throw new Error("Missing return statement in function");
  }

  final public String SQLUpdate() throws ParseException {
  String rs = new String(""), ts;
  SQLTableList tableList;
  SQLWhere where;
    jj_consume_token(UPDATE);
          if (inProcedure) rs = rs + fout.print("Exec SQL ");
          rs = rs + fout.print("UPDATE ");
          fout.align();
    tableList = SQLTableList();
    ts = tableList.toString();
    rs = rs + ts;
    jj_consume_token(SET);
          inSQL = true;
          rs = rs + fout.println();
          rs = rs + fout.printRj("SET ");
    label_12:
    while (true) {
      ts = SQLUpdateAssignment();
                                                            rs = rs + ts;
      if (jj_2_127(10)) {
        jj_consume_token(132);
          rs = rs + fout.println();
          rs = rs + fout.printRj(", ");
      } else {
        ;
      }
      if (jj_2_128(2147483647)) {
        ;
      } else {
        break label_12;
      }
    }
    if (jj_2_129(10)) {
      where = SQLWhere();
      ts = where.toString();
      rs = rs + ts;
    } else {
      ;
    }
    fout.outalign();
        inSQL = false;
    {if (true) return rs;}
    throw new Error("Missing return statement in function");
  }

  final public String SQLUpdateAssignment() throws ParseException {
  String s, rs = new String(""), ts;
    s = SQLLvalue();
    jj_consume_token(EQUAL);
    rs = rs + fout.print(s);
    rs = rs + fout.print(" = ");
    if (jj_2_131(2147483647)) {
                                       rs = rs + fout.print(" <<<CONCAT>>> ");
      ts = SQLTerm();
                       rs = rs + ts;
      label_13:
      while (true) {
        jj_consume_token(CONCAT);
                   rs = rs + fout.print(", ");
        ts = SQLTerm();
                         rs = rs + ts;
        if (jj_2_130(10)) {
          ;
        } else {
          break label_13;
        }
      }
    } else if (jj_2_132(10)) {
      ts = SQLSumExpr();
                            rs = rs + ts;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return rs;}
    throw new Error("Missing return statement in function");
  }

  final public String SQLLValueElement() throws ParseException {
  String rs = new String(""), ts;
  SQLSelect select;
    if (jj_2_133(10)) {
      jj_consume_token(NULL);
             rs = rs + fout.print("NULL");
    } else if (jj_2_134(10)) {
      ts = SQLSumExpr();
                        rs = rs + ts;
    } else if (jj_2_135(10)) {
      select = SQLSelect();
      ts = select.toString();
      rs = rs + ts;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return rs;}
    throw new Error("Missing return statement in function");
  }

  final public String SQLLValueList() throws ParseException {
  String rs = new String(""), ts;
    ts = SQLLValueElement();
                            rs = rs + ts;
    label_14:
    while (true) {
      if (jj_2_136(10)) {
        ;
      } else {
        break label_14;
      }
      jj_consume_token(132);
          rs = rs + fout.println();
          rs = rs + fout.print(", ");
      ts = SQLLValueElement();
                              rs = rs + ts;
    }
    {if (true) return rs;}
    throw new Error("Missing return statement in function");
  }

  final public SQLWhere SQLWhere() throws ParseException {
  String rs = new String(""), ts;
  SQLWhere where = new SQLWhere();
  SQLOrExpr orExpr;
    jj_consume_token(WHERE);
    rs = rs + fout.println();
    rs = rs + fout.printRj("WHERE ");
        inSQL = true;
    orExpr = SQLOrExpr();
    ts = orExpr.toString();
    rs = rs + ts;
    inSQL = false;
    where.setExpression(orExpr);
    {if (true) return where;}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  final private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  final private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  final private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  final private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  final private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  final private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  final private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  final private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  final private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  final private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  final private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  final private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  final private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  final private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  final private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  final private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  final private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  final private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  final private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  final private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  final private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  final private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  final private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  final private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  final private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  final private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  final private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  final private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  final private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  final private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  final private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  final private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  final private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  final private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  final private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  final private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  final private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  final private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  final private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  final private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  final private boolean jj_2_71(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  final private boolean jj_2_72(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(71, xla); }
  }

  final private boolean jj_2_73(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(72, xla); }
  }

  final private boolean jj_2_74(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_74(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(73, xla); }
  }

  final private boolean jj_2_75(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_75(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(74, xla); }
  }

  final private boolean jj_2_76(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_76(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(75, xla); }
  }

  final private boolean jj_2_77(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_77(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(76, xla); }
  }

  final private boolean jj_2_78(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_78(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(77, xla); }
  }

  final private boolean jj_2_79(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_79(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(78, xla); }
  }

  final private boolean jj_2_80(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_80(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(79, xla); }
  }

  final private boolean jj_2_81(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_81(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(80, xla); }
  }

  final private boolean jj_2_82(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_82(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(81, xla); }
  }

  final private boolean jj_2_83(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_83(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(82, xla); }
  }

  final private boolean jj_2_84(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_84(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(83, xla); }
  }

  final private boolean jj_2_85(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_85(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(84, xla); }
  }

  final private boolean jj_2_86(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_86(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(85, xla); }
  }

  final private boolean jj_2_87(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_87(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(86, xla); }
  }

  final private boolean jj_2_88(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_88(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(87, xla); }
  }

  final private boolean jj_2_89(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_89(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(88, xla); }
  }

  final private boolean jj_2_90(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_90(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(89, xla); }
  }

  final private boolean jj_2_91(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_91(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(90, xla); }
  }

  final private boolean jj_2_92(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_92(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(91, xla); }
  }

  final private boolean jj_2_93(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_93(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(92, xla); }
  }

  final private boolean jj_2_94(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_94(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(93, xla); }
  }

  final private boolean jj_2_95(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_95(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(94, xla); }
  }

  final private boolean jj_2_96(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_96(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(95, xla); }
  }

  final private boolean jj_2_97(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_97(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(96, xla); }
  }

  final private boolean jj_2_98(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_98(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(97, xla); }
  }

  final private boolean jj_2_99(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_99(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(98, xla); }
  }

  final private boolean jj_2_100(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_100(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(99, xla); }
  }

  final private boolean jj_2_101(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_101(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(100, xla); }
  }

  final private boolean jj_2_102(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_102(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(101, xla); }
  }

  final private boolean jj_2_103(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_103(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(102, xla); }
  }

  final private boolean jj_2_104(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_104(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(103, xla); }
  }

  final private boolean jj_2_105(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_105(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(104, xla); }
  }

  final private boolean jj_2_106(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_106(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(105, xla); }
  }

  final private boolean jj_2_107(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_107(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(106, xla); }
  }

  final private boolean jj_2_108(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_108(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(107, xla); }
  }

  final private boolean jj_2_109(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_109(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(108, xla); }
  }

  final private boolean jj_2_110(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_110(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(109, xla); }
  }

  final private boolean jj_2_111(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_111(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(110, xla); }
  }

  final private boolean jj_2_112(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_112(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(111, xla); }
  }

  final private boolean jj_2_113(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_113(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(112, xla); }
  }

  final private boolean jj_2_114(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_114(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(113, xla); }
  }

  final private boolean jj_2_115(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_115(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(114, xla); }
  }

  final private boolean jj_2_116(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_116(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(115, xla); }
  }

  final private boolean jj_2_117(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_117(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(116, xla); }
  }

  final private boolean jj_2_118(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_118(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(117, xla); }
  }

  final private boolean jj_2_119(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_119(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(118, xla); }
  }

  final private boolean jj_2_120(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_120(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(119, xla); }
  }

  final private boolean jj_2_121(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_121(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(120, xla); }
  }

  final private boolean jj_2_122(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_122(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(121, xla); }
  }

  final private boolean jj_2_123(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_123(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(122, xla); }
  }

  final private boolean jj_2_124(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_124(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(123, xla); }
  }

  final private boolean jj_2_125(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_125(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(124, xla); }
  }

  final private boolean jj_2_126(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_126(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(125, xla); }
  }

  final private boolean jj_2_127(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_127(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(126, xla); }
  }

  final private boolean jj_2_128(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_128(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(127, xla); }
  }

  final private boolean jj_2_129(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_129(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(128, xla); }
  }

  final private boolean jj_2_130(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_130(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(129, xla); }
  }

  final private boolean jj_2_131(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_131(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(130, xla); }
  }

  final private boolean jj_2_132(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_132(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(131, xla); }
  }

  final private boolean jj_2_133(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_133(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(132, xla); }
  }

  final private boolean jj_2_134(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_134(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(133, xla); }
  }

  final private boolean jj_2_135(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_135(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(134, xla); }
  }

  final private boolean jj_2_136(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_136(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(135, xla); }
  }

  final private boolean jj_3_66() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(IS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_66()) jj_scanpos = xsp;
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_3R_23()) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_3R_23()) return true;
    if (jj_3R_19()) return true;
    if (jj_scan_token(JOINPLUS)) return true;
    return false;
  }

  final private boolean jj_3_106() {
    if (jj_scan_token(132)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_3R_24()) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_3R_19()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_106()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_3R_62()) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_3R_22()) return true;
    return false;
  }

  final private boolean jj_3_104() {
    if (jj_3R_39()) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3_103() {
    if (jj_scan_token(ASTERISK)) return true;
    return false;
  }

  final private boolean jj_3_105() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_103()) {
    jj_scanpos = xsp;
    if (jj_3_104()) return true;
    }
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_102() {
    if (jj_scan_token(DISTINCT)) return true;
    return false;
  }

  final private boolean jj_3_100() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_101()) {
    jj_scanpos = xsp;
    if (jj_3_102()) return true;
    }
    return false;
  }

  final private boolean jj_3_101() {
    if (jj_scan_token(ALL)) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_100()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3_105()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_65() {
    if (jj_scan_token(OPENPAREN)) return true;
    if (jj_3R_28()) return true;
    if (jj_scan_token(CLOSEPAREN)) return true;
    if (jj_scan_token(VALUES)) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_16()) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_scan_token(EXISTS)) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_scan_token(INSERT)) return true;
    if (jj_scan_token(INTO)) return true;
    if (jj_3R_54()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_65()) jj_scanpos = xsp;
    if (jj_scan_token(OPENPAREN)) return true;
    if (jj_3R_28()) return true;
    if (jj_scan_token(CLOSEPAREN)) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_19()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(IS)) return true;
    return false;
  }

  final private boolean jj_3_99() {
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_3R_65()) return true;
    return false;
  }

  final private boolean jj_3_98() {
    if (jj_3R_37()) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_3R_64()) return true;
    return false;
  }

  final private boolean jj_3_64() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_64()) jj_scanpos = xsp;
    if (jj_scan_token(IN)) return true;
    if (jj_scan_token(OPENPAREN)) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(CLOSEPAREN)) return true;
    return false;
  }

  final private boolean jj_3_97() {
    if (jj_3R_29()) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3_7()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_scan_token(GROUP)) return true;
    if (jj_scan_token(BY)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  final private boolean jj_3_62() {
    if (jj_scan_token(132)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3_63() {
    if (jj_3R_19()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_62()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_18() {
    if (jj_3R_35()) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_scan_token(OPENPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_63()) jj_scanpos = xsp;
    if (jj_scan_token(CLOSEPAREN)) return true;
    return false;
  }

  final private boolean jj_3_61() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(OPENPAREN)) return true;
    return false;
  }

  final private boolean jj_3_96() {
    if (jj_scan_token(INTO)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  final private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) jj_scanpos = xsp;
    if (jj_scan_token(BETWEEN)) return true;
    if (jj_3R_19()) return true;
    if (jj_scan_token(AND)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_scan_token(ID)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3_60() {
    if (jj_scan_token(ORIGINPLUS)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(GET_CURRENT_TIMESTAMP)) return true;
    return false;
  }

  final private boolean jj_3_59() {
    if (jj_scan_token(ORIGINPLUS)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(FORMAT_ATTRIBUTE_SUBSTRING)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3_58() {
    if (jj_scan_token(ORIGINPLUS)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(FORMAT_AUDIT_HEADER)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_scan_token(WHERE)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_scan_token(SELECT)) return true;
    if (jj_3R_28()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_96()) jj_scanpos = xsp;
    if (jj_scan_token(FROM)) return true;
    if (jj_3R_54()) return true;
    xsp = jj_scanpos;
    if (jj_3_97()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_98()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_99()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_57() {
    if (jj_scan_token(ORIGINPLUS)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CONVERT_TIMESTAMP_TO_DATE)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3_56() {
    if (jj_scan_token(TO_NUMBER)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3_55() {
    if (jj_scan_token(TO_CHAR)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3_54() {
    if (jj_scan_token(SUBSTR)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3_53() {
    if (jj_scan_token(REPLACE)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3_52() {
    if (jj_scan_token(LENGTH)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3_51() {
    if (jj_scan_token(RTRIM)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3_50() {
    if (jj_scan_token(LTRIM)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3_136() {
    if (jj_scan_token(132)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_3R_15()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_1()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_49() {
    if (jj_scan_token(LPAD)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_3R_51()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_136()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_48() {
    if (jj_scan_token(COUNT)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_3R_23()) return true;
    if (jj_3R_19()) return true;
    if (jj_scan_token(JOINPLUS)) return true;
    return false;
  }

  final private boolean jj_3_47() {
    if (jj_scan_token(SUM)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3_46() {
    if (jj_scan_token(MIN)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3_45() {
    if (jj_scan_token(MAX)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3_44() {
    if (jj_scan_token(UPPER)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3_95() {
    if (jj_scan_token(SLASH)) return true;
    return false;
  }

  final private boolean jj_3_94() {
    if (jj_scan_token(ASTERISK)) return true;
    return false;
  }

  final private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_44()) {
    jj_scanpos = xsp;
    if (jj_3_45()) {
    jj_scanpos = xsp;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3_48()) {
    jj_scanpos = xsp;
    if (jj_3_49()) {
    jj_scanpos = xsp;
    if (jj_3_50()) {
    jj_scanpos = xsp;
    if (jj_3_51()) {
    jj_scanpos = xsp;
    if (jj_3_52()) {
    jj_scanpos = xsp;
    if (jj_3_53()) {
    jj_scanpos = xsp;
    if (jj_3_54()) {
    jj_scanpos = xsp;
    if (jj_3_55()) {
    jj_scanpos = xsp;
    if (jj_3_56()) {
    jj_scanpos = xsp;
    if (jj_3_57()) {
    jj_scanpos = xsp;
    if (jj_3_58()) {
    jj_scanpos = xsp;
    if (jj_3_59()) {
    jj_scanpos = xsp;
    if (jj_3_60()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_93() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_94()) {
    jj_scanpos = xsp;
    if (jj_3_95()) return true;
    }
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3_135() {
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3_134() {
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_3R_36()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_93()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_133() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_133()) {
    jj_scanpos = xsp;
    if (jj_3_134()) {
    jj_scanpos = xsp;
    if (jj_3_135()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_131() {
    if (jj_3R_50()) return true;
    if (jj_scan_token(CONCAT)) return true;
    return false;
  }

  final private boolean jj_3_92() {
    if (jj_3R_35()) return true;
    return false;
  }

  final private boolean jj_3_132() {
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3_91() {
    if (jj_scan_token(USER)) return true;
    return false;
  }

  final private boolean jj_3_90() {
    if (jj_scan_token(QUESTIONMARK)) return true;
    return false;
  }

  final private boolean jj_3_130() {
    if (jj_scan_token(CONCAT)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3_89() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_89()) {
    jj_scanpos = xsp;
    if (jj_3_90()) {
    jj_scanpos = xsp;
    if (jj_3_91()) {
    jj_scanpos = xsp;
    if (jj_3_92()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_3R_50()) return true;
    Token xsp;
    if (jj_3_130()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_130()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_scan_token(EXISTS)) return true;
    if (jj_scan_token(OPENPAREN)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(CLOSEPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_3R_35()) return true;
    if (jj_scan_token(EQUAL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3_132()) return true;
    }
    return false;
  }

  final private boolean jj_3_88() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3_129() {
    if (jj_3R_29()) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_3R_34()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_88()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_128() {
    if (jj_3R_35()) return true;
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  final private boolean jj_3_43() {
    if (jj_3R_29()) return true;
    return false;
  }

  final private boolean jj_3_127() {
    if (jj_scan_token(132)) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_3R_63()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_127()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_87() {
    if (jj_scan_token(DESC)) return true;
    return false;
  }

  final private boolean jj_3_86() {
    if (jj_scan_token(ASC)) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_86()) {
    jj_scanpos = xsp;
    if (jj_3_87()) return true;
    }
    return false;
  }

  final private boolean jj_3R_42() {
    if (jj_scan_token(DELETE)) return true;
    if (jj_scan_token(FROM)) return true;
    if (jj_3R_54()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_43()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_36() {
    if (jj_scan_token(OPENPAREN)) return true;
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    if (jj_scan_token(CLOSEPAREN)) return true;
    return false;
  }

  final private boolean jj_3_35() {
    if (jj_scan_token(OPENPAREN)) return true;
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    if (jj_scan_token(CLOSEPAREN)) return true;
    return false;
  }

  final private boolean jj_3_34() {
    if (jj_scan_token(CHARACTER)) return true;
    return false;
  }

  final private boolean jj_3_85() {
    if (jj_scan_token(132)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3_32() {
    if (jj_scan_token(OPENPAREN)) return true;
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    if (jj_scan_token(CLOSEPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_3R_33()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_85()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_42() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  final private boolean jj_3_41() {
    if (jj_scan_token(VARCHAR2)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_36()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_84() {
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_scan_token(UPDATE)) return true;
    if (jj_3R_54()) return true;
    if (jj_scan_token(SET)) return true;
    Token xsp;
    if (jj_3R_58()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_58()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3_129()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_33() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  final private boolean jj_3_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3_35()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_3R_18()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_84()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_39() {
    if (jj_scan_token(NUMBER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_32()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_38() {
    if (jj_scan_token(SMALLINT)) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3_41()) {
    jj_scanpos = xsp;
    if (jj_3_42()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_37() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  final private boolean jj_3_125() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  final private boolean jj_3_124() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3_126() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_124()) {
    jj_scanpos = xsp;
    if (jj_3_125()) return true;
    }
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_scan_token(ORDER)) return true;
    if (jj_scan_token(BY)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_126()) jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3_31() {
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_scan_token(OPEN)) return true;
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_31()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_123() {
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3_83() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_83()) jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3_122() {
    if (jj_3R_49()) return true;
    return false;
  }

  final private boolean jj_3_121() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3_30() {
    if (jj_scan_token(INTO)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3_82() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  final private boolean jj_3_120() {
    if (jj_scan_token(OPENPAREN)) return true;
    if (jj_3R_48()) return true;
    if (jj_scan_token(CLOSEPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_120()) {
    jj_scanpos = xsp;
    if (jj_3_121()) {
    jj_scanpos = xsp;
    if (jj_3_122()) {
    jj_scanpos = xsp;
    if (jj_3_123()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_82()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_scan_token(FETCH)) return true;
    if (jj_3R_28()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_81() {
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3_27() {
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3_80() {
    if (jj_scan_token(ROW_NOT_FOUND)) return true;
    return false;
  }

  final private boolean jj_3_119() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  final private boolean jj_3_29() {
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3_79() {
    if (jj_scan_token(SQL_I_O_CORRECT)) return true;
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_119()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_78() {
    if (jj_scan_token(REPLY)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3_25() {
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3_77() {
    if (jj_scan_token(REPLY_REPEATING_GROUP)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_scan_token(CLOSE)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  final private boolean jj_3_26() {
    if (jj_3R_18()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_76() {
    if (jj_scan_token(REQUEST)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3_118() {
    if (jj_scan_token(132)) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3_69() {
    if (jj_scan_token(ZERO)) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_76()) {
    jj_scanpos = xsp;
    if (jj_3_77()) {
    jj_scanpos = xsp;
    if (jj_3_78()) {
    jj_scanpos = xsp;
    if (jj_3_79()) {
    jj_scanpos = xsp;
    if (jj_3_80()) {
    jj_scanpos = xsp;
    if (jj_3_81()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_24() {
    if (jj_scan_token(132)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) return true;
    }
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_3R_18()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_3R_47()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_118()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_24()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_75() {
    if (jj_scan_token(ASTERISK)) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_scan_token(OPENPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) jj_scanpos = xsp;
    if (jj_scan_token(CLOSEPAREN)) return true;
    return false;
  }

  final private boolean jj_3_68() {
    if (jj_scan_token(ZEROS)) return true;
    return false;
  }

  final private boolean jj_3_74() {
    if (jj_scan_token(SPACES)) return true;
    return false;
  }

  final private boolean jj_3_73() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_68()) {
    jj_scanpos = xsp;
    if (jj_3_69()) return true;
    }
    return false;
  }

  final private boolean jj_3_72() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_71() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_70() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_70()) {
    jj_scanpos = xsp;
    if (jj_3_71()) {
    jj_scanpos = xsp;
    if (jj_3_72()) {
    jj_scanpos = xsp;
    if (jj_3_73()) {
    jj_scanpos = xsp;
    if (jj_3_74()) {
    jj_scanpos = xsp;
    if (jj_3_75()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_scan_token(LESSEQUAL)) return true;
    return false;
  }

  final private boolean jj_3_117() {
    if (jj_scan_token(CONCAT)) return true;
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_scan_token(LESS)) return true;
    return false;
  }

  final private boolean jj_3_116() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_scan_token(GREATEREQUAL)) return true;
    return false;
  }

  final private boolean jj_3_115() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3_114() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_115()) {
    jj_scanpos = xsp;
    if (jj_3_116()) {
    jj_scanpos = xsp;
    if (jj_3_117()) return true;
    }
    }
    if (jj_3R_46()) return true;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_scan_token(GREATER)) return true;
    return false;
  }

  final private boolean jj_3_67() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_3R_46()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_114()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_scan_token(NOTEQUAL2)) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_67()) jj_scanpos = xsp;
    if (jj_scan_token(LIKE)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_scan_token(NOTEQUAL)) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  final private boolean jj_3_113() {
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3_112() {
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3_111() {
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_110() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3_109() {
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3_108() {
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    if (jj_scan_token(JOINPLUS)) return true;
    if (jj_3R_23()) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3_107() {
    if (jj_3R_17()) return true;
    return false;
  }

  public SQLParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
      jj_la1_4();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {};
   }
   private static void jj_la1_4() {
      jj_la1_4 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[136];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public SQLParser(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public SQLParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public SQLParser(SQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(SQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[133];
    for (int i = 0; i < 133; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 133; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 136; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
            case 70: jj_3_71(); break;
            case 71: jj_3_72(); break;
            case 72: jj_3_73(); break;
            case 73: jj_3_74(); break;
            case 74: jj_3_75(); break;
            case 75: jj_3_76(); break;
            case 76: jj_3_77(); break;
            case 77: jj_3_78(); break;
            case 78: jj_3_79(); break;
            case 79: jj_3_80(); break;
            case 80: jj_3_81(); break;
            case 81: jj_3_82(); break;
            case 82: jj_3_83(); break;
            case 83: jj_3_84(); break;
            case 84: jj_3_85(); break;
            case 85: jj_3_86(); break;
            case 86: jj_3_87(); break;
            case 87: jj_3_88(); break;
            case 88: jj_3_89(); break;
            case 89: jj_3_90(); break;
            case 90: jj_3_91(); break;
            case 91: jj_3_92(); break;
            case 92: jj_3_93(); break;
            case 93: jj_3_94(); break;
            case 94: jj_3_95(); break;
            case 95: jj_3_96(); break;
            case 96: jj_3_97(); break;
            case 97: jj_3_98(); break;
            case 98: jj_3_99(); break;
            case 99: jj_3_100(); break;
            case 100: jj_3_101(); break;
            case 101: jj_3_102(); break;
            case 102: jj_3_103(); break;
            case 103: jj_3_104(); break;
            case 104: jj_3_105(); break;
            case 105: jj_3_106(); break;
            case 106: jj_3_107(); break;
            case 107: jj_3_108(); break;
            case 108: jj_3_109(); break;
            case 109: jj_3_110(); break;
            case 110: jj_3_111(); break;
            case 111: jj_3_112(); break;
            case 112: jj_3_113(); break;
            case 113: jj_3_114(); break;
            case 114: jj_3_115(); break;
            case 115: jj_3_116(); break;
            case 116: jj_3_117(); break;
            case 117: jj_3_118(); break;
            case 118: jj_3_119(); break;
            case 119: jj_3_120(); break;
            case 120: jj_3_121(); break;
            case 121: jj_3_122(); break;
            case 122: jj_3_123(); break;
            case 123: jj_3_124(); break;
            case 124: jj_3_125(); break;
            case 125: jj_3_126(); break;
            case 126: jj_3_127(); break;
            case 127: jj_3_128(); break;
            case 128: jj_3_129(); break;
            case 129: jj_3_130(); break;
            case 130: jj_3_131(); break;
            case 131: jj_3_132(); break;
            case 132: jj_3_133(); break;
            case 133: jj_3_134(); break;
            case 134: jj_3_135(); break;
            case 135: jj_3_136(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
