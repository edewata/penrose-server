/* Generated By:JavaCC: Do not edit this line. SQLParserTokenManager.java */
package org.safehaus.penrose.sql;
import java.io.*;

public class SQLParserTokenManager implements SQLParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0x2L) != 0L)
            return 0;
         if ((active1 & 0x2000000000000L) != 0L)
            return 14;
         if ((active1 & 0x8000000000000000L) != 0L)
            return 6;
         if ((active0 & 0xffffffffffffff80L) != 0L || (active1 & 0xfffffefffL) != 0L)
         {
            jjmatchedKind = 107;
            return 48;
         }
         if ((active1 & 0x2c0000000000000L) != 0L)
            return 27;
         if ((active1 & 0x430000000000000L) != 0L)
            return 31;
         return -1;
      case 1:
         if ((active0 & 0xffffffcfc3ffdf80L) != 0L || (active1 & 0xfffff6fe1L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 107;
               jjmatchedPos = 1;
            }
            return 48;
         }
         if ((active0 & 0x303c002000L) != 0L || (active1 & 0x801eL) != 0L)
            return 48;
         return -1;
      case 2:
         if ((active0 & 0x2000100380400380L) != 0L || (active1 & 0x100000L) != 0L)
            return 48;
         if ((active1 & 0x10c00000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 2;
            return 25;
         }
         if ((active0 & 0xdfffefec4bbfdc00L) != 0L || (active1 & 0xfef2fefefL) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 2;
            return 48;
         }
         return -1;
      case 3:
         if ((active1 & 0x290e80000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 107;
               jjmatchedPos = 3;
            }
            return 25;
         }
         if ((active0 & 0x418e0044094c000L) != 0L || (active1 & 0x40020c4L) != 0L)
            return 48;
         if ((active0 & 0xdbe70fe80b2b1c00L) != 0L || (active1 & 0xd6b07cf2bL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 107;
               jjmatchedPos = 3;
            }
            return 48;
         }
         return -1;
      case 4:
         if ((active0 & 0x1075002001200400L) != 0L || (active1 & 0x8030500L) != 0L)
            return 48;
         if ((active0 & 0xcb820fc80a0b9800L) != 0L || (active1 & 0xc6304ca2bL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 107;
               jjmatchedPos = 4;
            }
            return 48;
         }
         if ((active1 & 0x390e80000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 107;
               jjmatchedPos = 4;
            }
            return 25;
         }
         return -1;
      case 5:
         if ((active0 & 0x3000d8802020000L) != 0L || (active1 & 0x3004822L) != 0L)
            return 48;
         if ((active1 & 0x8L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 107;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active1 & 0x7b0e80000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 5;
            return 25;
         }
         if ((active0 & 0xc882024008099800L) != 0L || (active1 & 0x840068201L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 5;
            return 48;
         }
         return -1;
      case 6:
         if ((active0 & 0x8001800L) != 0L || (active1 & 0x40040200L) != 0L)
            return 48;
         if ((active1 & 0x8L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 107;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0xc882024000098000L) != 0L || (active1 & 0x800028001L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 6;
            return 48;
         }
         if ((active1 & 0x400000L) != 0L)
            return 25;
         if ((active1 & 0x7b0a80000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 6;
            return 25;
         }
         return -1;
      case 7:
         if ((active1 & 0x7b0a80000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 7;
            return 25;
         }
         if ((active0 & 0x20000090000L) != 0L)
            return 48;
         if ((active0 & 0xc880004000008000L) != 0L || (active1 & 0x800028001L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 7;
            return 48;
         }
         if ((active1 & 0x8L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 107;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x2000000000000L) != 0L)
            return 25;
         return -1;
      case 8:
         if ((active0 & 0x800004000008000L) != 0L)
            return 48;
         if ((active1 & 0x7b0280000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 8;
            return 25;
         }
         if ((active1 & 0x8L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 107;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active1 & 0x800000L) != 0L)
            return 25;
         if ((active0 & 0xc080000000000000L) != 0L || (active1 & 0x800028001L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 8;
            return 48;
         }
         return -1;
      case 9:
         if ((active1 & 0x8000L) != 0L)
            return 48;
         if ((active1 & 0x8L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 107;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0xc080000000000000L) != 0L || (active1 & 0x800020001L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 9;
            return 48;
         }
         if ((active1 & 0x7b0280000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 9;
            return 25;
         }
         return -1;
      case 10:
         if ((active1 & 0x8L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 107;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active1 & 0x7b0280000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 10;
            return 25;
         }
         if ((active0 & 0xc080000000000000L) != 0L || (active1 & 0x800020001L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 10;
            return 48;
         }
         return -1;
      case 11:
         if ((active1 & 0x590280000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 11;
            return 25;
         }
         if ((active0 & 0xc080000000000000L) != 0L || (active1 & 0x800020001L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 11;
            return 48;
         }
         if ((active1 & 0x8L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 107;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active1 & 0x220000000L) != 0L)
            return 25;
         return -1;
      case 12:
         if ((active0 & 0xc080000000000000L) != 0L || (active1 & 0x800020001L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 12;
            return 48;
         }
         if ((active1 & 0x580200000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 12;
            return 25;
         }
         if ((active1 & 0x8L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 107;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active1 & 0x10080000L) != 0L)
            return 25;
         return -1;
      case 13:
         if ((active1 & 0x8L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 107;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active1 & 0x580200000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 13;
            return 25;
         }
         if ((active0 & 0xc080000000000000L) != 0L || (active1 & 0x800020001L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 13;
            return 48;
         }
         return -1;
      case 14:
         if ((active1 & 0x800000000L) != 0L)
            return 48;
         if ((active0 & 0xc080000000000000L) != 0L || (active1 & 0x20001L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 14;
            return 48;
         }
         if ((active1 & 0x8L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 107;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active1 & 0x200000L) != 0L)
            return 25;
         if ((active1 & 0x580000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 14;
            return 25;
         }
         return -1;
      case 15:
         if ((active0 & 0xc080000000000000L) != 0L || (active1 & 0x20001L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 15;
            return 48;
         }
         if ((active1 & 0x580000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 15;
            return 25;
         }
         if ((active1 & 0x8L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 107;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 16:
         if ((active0 & 0x4000000000000000L) != 0L)
            return 48;
         if ((active1 & 0x500000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 16;
            return 25;
         }
         if ((active1 & 0x8L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 107;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active1 & 0x80000000L) != 0L)
            return 25;
         if ((active0 & 0x8080000000000000L) != 0L || (active1 & 0x20001L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 16;
            return 48;
         }
         return -1;
      case 17:
         if ((active0 & 0x8080000000000000L) != 0L || (active1 & 0x20001L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 17;
            return 48;
         }
         if ((active1 & 0x8L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 107;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active1 & 0x500000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 17;
            return 25;
         }
         return -1;
      case 18:
         if ((active0 & 0x8080000000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 18;
            return 48;
         }
         if ((active1 & 0x500000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 18;
            return 25;
         }
         if ((active1 & 0x20001L) != 0L)
            return 48;
         if ((active1 & 0x8L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 107;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 19:
         if ((active1 & 0x500000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 19;
            return 25;
         }
         if ((active1 & 0x8L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 107;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x8080000000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 19;
            return 48;
         }
         return -1;
      case 20:
         if ((active1 & 0x500000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 20;
            return 25;
         }
         if ((active0 & 0x8080000000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 20;
            return 48;
         }
         if ((active1 & 0x8L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 107;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 21:
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 21;
            return 48;
         }
         if ((active0 & 0x80000000000000L) != 0L)
            return 48;
         if ((active1 & 0x500000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 21;
            return 25;
         }
         if ((active1 & 0x8L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 107;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 22:
         if ((active1 & 0x8L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 107;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active1 & 0x100000000L) != 0L)
            return 25;
         if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 22;
            return 25;
         }
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 22;
            return 48;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000000000L);
      case 37:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000001000L);
      case 40:
         jjmatchedKind = 124;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000000000L);
      case 41:
         return jjStopAtPos(0, 125);
      case 42:
         return jjStopAtPos(0, 126);
      case 43:
         return jjStopAtPos(0, 128);
      case 44:
         return jjStopAtPos(0, 132);
      case 45:
         return jjStartNfaWithStates_0(0, 129, 0);
      case 46:
         return jjStartNfaWithStates_0(0, 113, 14);
      case 47:
         return jjStartNfaWithStates_0(0, 127, 6);
      case 58:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000000L);
      case 59:
         return jjStopAtPos(0, 112);
      case 60:
         jjmatchedKind = 116;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x420000000000000L);
      case 61:
         return jjStopAtPos(0, 120);
      case 62:
         jjmatchedKind = 118;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000000000L);
      case 63:
         return jjStopAtPos(0, 130);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0xc000000000000000L, 0x100000000L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1L);
      case 75:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8c0000000L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x380L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x3c00L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x6000000003c000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1000000000c0000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0xe00000000700000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x3000000000800000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x1000000L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x3c000000L, 0x1eL);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x40000000L, 0x1e0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x180000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0xe00000000L, 0x800L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x3000000000L, 0xe000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0xf0600L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x1f0000000000L, 0x300000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x600000000000L, 0xc00000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x1800000000000L, 0x1000000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x2000000000000L, 0x2000000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0xc000000L);
      case 122:
         return jjMoveStringLiteralDfa1_0(0x18000000000000L, 0x0L);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000000L);
      case 126:
         return jjStopAtPos(0, 115);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 43:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800000000000000L);
      case 61:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 110);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 117);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 119);
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 121);
         break;
      case 62:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 122);
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000000L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200000000L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000000L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000000L);
      case 81:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000000L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000400000000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000082000000L, active1, 0x2000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x1118018000040c00L, active1, 0x880170221L);
      case 102:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(1, 26, 48);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x420000000c000L, active1, 0xc000000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x140080000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000300080L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8400100L, active1, 0x100eL);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0xe0a0000200011000L, active1, 0xc80840L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x1040000000000L, active1, 0x1002080L);
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200000L);
      case 114:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x6001800000L, active1, 0x8000L);
      case 115:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000200L, active1, 0x10L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4500L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x180c00020000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0xe00000000000000L, active1, 0L);
      case 121:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(1, 13, 48);
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L, active1, 0L);
      case 124:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 111);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10L);
      case 41:
         if ((active1 & 0x800000000000000L) != 0L)
            return jjStopAtPos(2, 123);
         break;
      case 66:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20000000L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x140000000L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000000000000L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400000000L);
      case 89:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000000L);
      case 95:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10c00000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x6000000c000L, active1, 0x80L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L, active1, 0L);
      case 99:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 9, 48);
         return jjMoveStringLiteralDfa3_0(active0, 0x800008000000000L, active1, 0L);
      case 100:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 48);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 22, 48);
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L, active1, 0x1000808L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x4a00000000000L, active1, 0x4002000L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x600000000000000L, active1, 0x8008000L);
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L, active1, 0L);
      case 108:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 7, 48);
         return jjMoveStringLiteralDfa3_0(active0, 0x100010400000000L, active1, 0x2200000L);
      case 109:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 44, 48);
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L, active1, 0L);
      case 110:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 32, 48);
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000010000L, active1, 0x20L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x40004001801000L, active1, 0x1040L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x1400000000000L, active1, 0x30200L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000L);
      case 114:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 61, 48);
         return jjMoveStringLiteralDfa3_0(active0, 0xc01a000000020000L, active1, 0x500L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x3c0000L, active1, 0x2L);
      case 116:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(2, 33, 48);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 84, 48);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000008000800L, active1, 0x880000005L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000L);
      case 120:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(2, 31, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000001L);
      case 68:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000000L);
      case 69:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000000L);
      case 76:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000000L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000000L);
      case 87:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000000000000L);
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x280280000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L, active1, 0L);
      case 99:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 48);
         return jjMoveStringLiteralDfa4_0(active0, 0x1002044000000000L, active1, 0x400000L);
      case 100:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 71, 48);
         break;
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 20, 48);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 48);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 46, 48);
         return jjMoveStringLiteralDfa4_0(active0, 0x901012008000000L, active1, 0x400aL);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8020L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x2200400L, active1, 0x500L);
      case 108:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 48);
         return jjMoveStringLiteralDfa4_0(active0, 0x20000001000L, active1, 0x8030200L);
      case 109:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 48);
         return jjMoveStringLiteralDfa4_0(active0, 0xc000000000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 45, 48);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 77, 48);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 90, 48);
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L, active1, 0x800000L);
      case 111:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 66, 48);
         return jjMoveStringLiteralDfa4_0(active0, 0x10008000000000L, active1, 0L);
      case 112:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 70, 48);
         break;
      case 114:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 47, 48);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000008000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x240080000030000L, active1, 0L);
      case 116:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 58, 48);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L, active1, 0x1010L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L, active1, 0x802040800L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x800L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000000L);
      case 69:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000000L);
      case 70:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200200000L);
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x480000000L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000000000000L);
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0xc000000000008000L, active1, 0x210L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 50, 48);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 54, 48);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 91, 48);
         return jjMoveStringLiteralDfa5_0(active0, 0x80044800001800L, active1, 0x2040000L);
      case 102:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 21, 48);
         break;
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L, active1, 0L);
      case 104:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 60, 48);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L, active1, 0x400000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L, active1, 0x8000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000L, active1, 0x800L);
      case 109:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 72, 48);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 74, 48);
         break;
      case 110:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 10, 48);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L, active1, 0x80000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000L, active1, 0x40000000L);
      case 112:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 48);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L, active1, 0x800000000L);
      case 114:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 37, 48);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 48, 48);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L, active1, 0x4002L);
      case 115:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 52, 48);
         break;
      case 116:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 53, 48);
         return jjMoveStringLiteralDfa5_0(active0, 0x300080000010000L, active1, 0x1000020L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800001L);
      case 120:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8L);
      case 121:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8L);
      case 70:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800000000L);
      case 78:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x300000000L);
      case 82:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000L);
      case 84:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10000000L);
      case 89:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000000000000L);
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x420200000L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000011000L, active1, 0x400000L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L, active1, 0x200L);
      case 100:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 39, 48);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L, active1, 0x40000000L);
      case 101:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 56, 48);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 75, 48);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 88, 48);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000800L, active1, 0L);
      case 103:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 25, 48);
         break;
      case 104:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 69, 48);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L, active1, 0x8000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80081000L);
      case 114:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 17, 48);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 35, 48);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 43, 48);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000000L, active1, 0x1L);
      case 115:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 42, 48);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 57, 48);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 78, 48);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 89, 48);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000L);
      case 116:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 40, 48);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(5, 65, 48);
         return jjMoveStringLiteralDfa6_0(active0, 0xc800000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0xc000000000000000L, active1, 0x110000000L);
      case 68:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000000L);
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000L);
      case 80:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000000000000L);
      case 83:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000000L);
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800000000L);
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800008L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000L, active1, 0L);
      case 101:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 73, 48);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 94, 48);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10L);
      case 110:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 11, 48);
         else if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(6, 12, 48);
         return jjMoveStringLiteralDfa7_0(active0, 0x20000010000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000L);
      case 114:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 27, 48);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 86, 25);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000L, active1, 0x1L);
      case 116:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 82, 48);
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000008000L, active1, 0x80000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000L, active1, 0x1000L);
      case 119:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 50:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 49, 25);
         break;
      case 69:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStopAtPos(7, 114);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x600000000L);
      case 77:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100000000L);
      case 84:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000000L, active1, 0x20000000L);
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x90280000L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000L, active1, 0x800011L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20000L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(7, 16, 48);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 19, 48);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 41, 48);
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000000L, active1, 0x800000000L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x18L);
      case 65:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20000000L);
      case 67:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x200000L);
      case 69:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x100000000L);
      case 70:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10000000L);
      case 78:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x80000000L);
      case 82:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x200000000L);
      case 84:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x400000000L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800000000L);
      case 100:
         if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(8, 76);
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 38, 48);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20000L);
      case 102:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x80000L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 59, 48);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1L);
      case 114:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(8, 15, 48);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(8, 87, 25);
         break;
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x400000000L);
      case 79:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x10000000L);
      case 82:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x200000000L);
      case 84:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x20000000L);
      case 95:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x100000000L);
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x20000L);
      case 98:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x800000000L);
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x80280010L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000000000L, active1, 0L);
      case 115:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(9, 79, 48);
         break;
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x800000000L);
      case 73:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x400000000L);
      case 79:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x300000000L);
      case 84:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x1L);
      case 85:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x30000000L);
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000000000L, active1, 0L);
      case 102:
         if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(10, 68);
         break;
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000000000L, active1, 0x8L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x200000L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000000000L, active1, 0x80020000L);
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 70:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x100000000L);
      case 72:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000000000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x400000000L);
      case 78:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x10000000L);
      case 82:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(11, 97, 25);
         break;
      case 83:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(11, 93, 25);
         return jjMoveStringLiteralDfa12_0(active0, 0x80000000000000L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x80000000L);
      case 98:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x20001L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x80008L);
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x800200000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 68:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(12, 92, 25);
         break;
      case 70:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x80000000L);
      case 95:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x500000000L);
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x8L);
      case 100:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(12, 83, 25);
         break;
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000000000000000L, active1, 0x200000L);
      case 109:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x1L);
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x20000L);
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x800000000L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x80000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x400000000L);
      case 69:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x100000000L);
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0x4080000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x200000L);
      case 101:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x1L);
      case 103:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x20000L);
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x880000000L);
      case 114:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x8L);
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0x8000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(12, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x400000000L);
      case 71:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x20000L);
      case 82:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x100000000L);
      case 83:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x1L);
      case 100:
         return jjMoveStringLiteralDfa15_0(active0, 0x4000000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa15_0(active0, 0x8000000000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa15_0(active0, 0x80000000000000L, active1, 0L);
      case 114:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(14, 99, 48);
         break;
      case 116:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(14, 85, 25);
         break;
      case 117:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x80000000L);
      case 121:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(13, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, active1, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 82:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x100000000L);
      case 83:
         return jjMoveStringLiteralDfa16_0(active0, 0x8000000000000000L, active1, 0x400000000L);
      case 95:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x8L);
      case 101:
         return jjMoveStringLiteralDfa16_0(active0, 0x4000000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x80000000L);
      case 112:
         return jjMoveStringLiteralDfa16_0(active0, 0x80000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x20000L);
      case 116:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x1L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(14, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, active1, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x400000000L);
      case 79:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x100000000L);
      case 84:
         return jjMoveStringLiteralDfa17_0(active0, 0x80000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x1L);
      case 100:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(16, 95, 25);
         break;
      case 105:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x8L);
      case 111:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x20000L);
      case 114:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 62, 48);
         break;
      case 117:
         return jjMoveStringLiteralDfa17_0(active0, 0x8000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa17_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(15, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, active1, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 82:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x500000000L);
      case 98:
         return jjMoveStringLiteralDfa18_0(active0, 0x8000000000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x1L);
      case 110:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x8L);
      case 111:
         return jjMoveStringLiteralDfa18_0(active0, 0x80000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa18_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(16, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, active1, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa19_0(active0, 0x80000000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x400000000L);
      case 83:
         return jjMoveStringLiteralDfa19_0(active0, 0x8000000000000000L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x100000000L);
      case 112:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(18, 64, 48);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(18, 81, 48);
         break;
      case 116:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa19_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(17, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, active1, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x100000000L);
      case 80:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x400000000L);
      case 97:
         return jjMoveStringLiteralDfa20_0(active0, 0x80000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x8L);
      case 116:
         return jjMoveStringLiteralDfa20_0(active0, 0x8000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa20_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(18, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, active1, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 82:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x100000000L);
      case 84:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x400000000L);
      case 103:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x8L);
      case 114:
         return jjMoveStringLiteralDfa21_0(active0, 0x8000000000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa21_0(active0, 0x80000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa21_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(19, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0, active1, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x100000000L);
      case 73:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x400000000L);
      case 101:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(21, 55, 48);
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x8L);
      case 105:
         return jjMoveStringLiteralDfa22_0(active0, 0x8000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa22_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(20, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0, active1, 0L);
      return 22;
   }
   switch(curChar)
   {
      case 65:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(22, 96, 25);
         break;
      case 79:
         return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x400000000L);
      case 110:
         return jjMoveStringLiteralDfa23_0(active0, 0x8000000000000000L, active1, 0L);
      case 114:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(22, 67);
         break;
      default :
         break;
   }
   return jjStartNfa_0(21, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa23_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(21, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, active0, active1, 0L);
      return 23;
   }
   switch(curChar)
   {
      case 78:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(23, 98, 25);
         break;
      case 103:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(23, 63, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(22, active0, active1, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 48;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                     jjCheckNAddStates(0, 6);
                  }
                  else if ((0x7000000000000000L & l) != 0L)
                  {
                     if (kind > 131)
                        kind = 131;
                  }
                  else if (curChar == 33)
                     jjCheckNAdd(27);
                  else if (curChar == 39)
                     jjCheckNAddStates(7, 9);
                  else if (curChar == 46)
                     jjCheckNAdd(14);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if (curChar == 60)
                     jjCheckNAddTwoStates(27, 31);
                  else if (curChar == 62)
                     jjCheckNAdd(27);
                  break;
               case 31:
                  if (curChar == 62)
                  {
                     if (kind > 131)
                        kind = 131;
                  }
                  else if (curChar == 61)
                  {
                     if (kind > 131)
                        kind = 131;
                  }
                  break;
               case 48:
               case 25:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAdd(25);
                  break;
               case 0:
                  if (curChar == 45)
                     jjCheckNAddStates(10, 12);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 3:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 7:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 8:
                  if (curChar == 42)
                     jjCheckNAddStates(13, 15);
                  break;
               case 9:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(10, 8);
                  break;
               case 10:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(10, 8);
                  break;
               case 11:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               case 12:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 13:
                  if (curChar == 46)
                     jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAddTwoStates(14, 15);
                  break;
               case 16:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(17);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAdd(17);
                  break;
               case 18:
                  if (curChar == 39)
                     jjCheckNAddStates(7, 9);
                  break;
               case 19:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 20:
                  if (curChar == 39)
                     jjCheckNAddStates(16, 18);
                  break;
               case 21:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 23:
                  if (curChar == 39 && kind > 106)
                     kind = 106;
                  break;
               case 26:
                  if ((0x7000000000000000L & l) != 0L && kind > 131)
                     kind = 131;
                  break;
               case 27:
                  if (curChar == 61 && kind > 131)
                     kind = 131;
                  break;
               case 28:
                  if (curChar == 62)
                     jjCheckNAdd(27);
                  break;
               case 29:
                  if (curChar == 33)
                     jjCheckNAdd(27);
                  break;
               case 30:
                  if (curChar == 60)
                     jjCheckNAddTwoStates(27, 31);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAddStates(0, 6);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAdd(33);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(34, 35);
                  break;
               case 35:
                  if (curChar == 46)
                     jjCheckNAdd(36);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAddTwoStates(36, 37);
                  break;
               case 38:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(39);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAdd(39);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  break;
               case 42:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(43);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAdd(43);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAddTwoStates(44, 45);
                  break;
               case 46:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(47);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAdd(47);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 5:
               case 24:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAddTwoStates(24, 25);
                  break;
               case 48:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAdd(25);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddTwoStates(24, 25);
                  }
                  break;
               case 1:
                  jjAddStates(10, 12);
                  break;
               case 7:
                  jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
               case 10:
                  jjCheckNAddTwoStates(10, 8);
                  break;
               case 15:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(19, 20);
                  break;
               case 19:
                  jjCheckNAddStates(7, 9);
                  break;
               case 22:
                  jjCheckNAddStates(16, 18);
                  break;
               case 25:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAdd(25);
                  break;
               case 37:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(21, 22);
                  break;
               case 41:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(23, 24);
                  break;
               case 45:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(25, 26);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(10, 12);
                  break;
               case 7:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
               case 10:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(10, 8);
                  break;
               case 19:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 22:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 48 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 13:
         return jjMoveStringLiteralDfa1_1(0x1000000000L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_1(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 100);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjStopStringLiteralDfa_2(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0, long active1)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0, active1), pos + 1);
}
private final int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 126:
         return jjStopAtPos(0, 101);
      default :
         return jjMoveNfa_2(2, 0);
   }
}
private final int jjMoveNfa_2(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 2:
               case 0:
                  jjCheckNAddTwoStates(0, 1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0xbfffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(0, 1);
                  else if (curChar == 126)
                  {
                     if (kind > 102)
                        kind = 102;
                  }
                  break;
               case 0:
                  if ((0xbfffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(0, 1);
                  break;
               case 1:
                  if (curChar == 126)
                     kind = 102;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 2:
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(0, 1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   33, 34, 35, 40, 41, 44, 45, 19, 21, 23, 1, 2, 4, 8, 9, 11, 
   21, 22, 23, 16, 17, 38, 39, 42, 43, 46, 47, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, "\141\154\154", "\141\156\144", 
"\141\163\143", "\142\145\147\151\156", "\142\145\164\167\145\145\156", 
"\142\157\157\154\145\141\156", "\142\171", "\143\150\141\162", "\143\150\141\162\141\143\164\145\162", 
"\143\157\156\163\164\141\156\164", "\143\165\162\163\157\162", "\144\145\163\143", 
"\144\151\163\164\151\156\143\164", "\145\154\163\145", "\145\154\163\151\146", "\145\156\144", 
"\146\162\157\155", "\147\162\157\165\160", "\150\141\166\151\156\147", "\151\146", 
"\151\156\164\145\147\145\162", "\151\156", "\151\163", "\154\151\153\145", "\155\141\170", "\155\151\156", 
"\156\157\164", "\156\165\154\154", "\156\165\155\142\145\162", "\157\162", 
"\157\162\144\145\162", "\160\162\157\143\145\144\165\162\145", "\162\145\143\157\162\144", 
"\163\145\154\145\143\164", "\163\155\141\154\154\151\156\164", "\163\160\141\143\145\163", 
"\163\165\142\163\164\162", "\163\165\155", "\164\150\145\156", "\164\171\160\145", "\165\163\145\162", 
"\165\160\160\145\162", "\166\141\162\143\150\141\162\62", "\167\150\145\162\145", "\172\145\162\157", 
"\172\145\162\157\163", "\143\157\165\156\164", "\143\154\157\163\145", 
"\103\157\156\166\145\162\164\124\151\155\145\123\164\141\155\160\124\157\104\141\164\145", "\144\145\154\145\164\145", "\145\170\151\163\164\163", "\145\170\151\164", 
"\145\170\143\145\160\164\151\157\156", "\146\145\164\143\150", "\146\157\162", 
"\106\157\162\155\141\164\101\165\144\151\164\110\145\141\144\145\162", 
"\106\157\162\155\141\164\101\164\164\162\151\142\165\164\145\123\165\142\123\164\162\151\156\147", 
"\107\145\164\103\165\162\162\145\156\164\124\151\155\145\123\164\141\155\160", "\151\156\163\145\162\164", "\151\156\164\157", 
"\151\156\144\145\170\40\142\171\40\142\151\156\141\162\171\137\151\156\164\145\147\145\162", "\151\163\40\164\141\142\154\145\40\157\146", "\154\145\156\147\164\150", 
"\154\157\157\160", "\154\160\141\144", "\154\164\162\151\155", "\162\145\160\154\141\143\145", 
"\162\164\162\151\155", "\156\157\144\165\154\145", "\45\156\157\164\106\157\165\156\144", 
"\157\160\145\156", "\157\164\150\145\162\163", "\157\162\151\147\151\156\160\154\165\163", 
"\162\145\160\154\171", 
"\162\145\160\154\171\122\145\160\145\141\164\151\156\147\107\162\157\165\160", "\162\145\161\165\145\163\164", 
"\162\157\167\137\156\157\164\137\146\157\165\156\144", "\163\145\164", 
"\163\161\154\137\111\137\117\137\103\157\162\162\145\143\164", "\164\157\137\143\150\141\162", "\164\157\137\156\165\155\142\145\162", 
"\165\160\144\141\164\145", "\166\141\154\165\145\163", "\167\150\145\156", "\167\150\151\154\145", 
"\116\117\137\104\101\124\101\137\106\117\125\116\104", "\124\101\102\114\105\137\123\124\101\124\125\123", 
"\123\121\114\103\157\144\145", "\123\145\164\137\122\157\167\137\116\157\164\137\106\157\165\156\144", 
"\106\111\114\105\137\116\101\115\105\137\117\106\137\105\122\122\117\122\137\101\122\105\101", "\113\105\131\137\111\116\137\105\122\122\117\122", 
"\105\122\122\117\122\137\104\105\124\101\111\114\137\104\105\123\103\122\111\120\124\111\117\116", "\123\145\164\165\160\106\141\164\141\154\105\162\162\157\162", "\15\12", 
"\176", null, null, null, null, null, null, null, null, "\72\75", "\174\174", "\73", 
"\56", "\45\122\117\127\124\131\120\105", "\176", "\74", "\74\75", "\76", "\76\75", 
"\75", "\41\75", "\74\76", "\50\53\51", "\50", "\51", "\52", "\57", "\53", "\55", 
"\77", null, "\54", };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "DESCRIPTION_START_STATE", 
   "DESCRIPTION_STATE", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   2, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffff81L, 0xffffcdffffffffffL, 0x1fL, 
};
static final long[] jjtoSkip = {
   0x7eL, 0x0L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[48];
private final int[] jjstateSet = new int[96];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public SQLParserTokenManager(SimpleCharStream stream)
{
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public SQLParserTokenManager(SimpleCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 48; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
           SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 5 :
         if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
          SC.addComment(SC.fout.printBlock("//" + image.toString().substring(2)));
         break;
      case 6 :
         if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
          SC.addComment(SC.fout.printBlock(image.toString()) + SC.fout.println());
         break;
      default :
         break;
   }
}
}
