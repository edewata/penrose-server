<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mappings PUBLIC
  "-//Penrose/DTD Mappings ${product.specification}//EN"
  "http://penrose.safehaus.org/dtd/mappings.dtd">

<mappings>

  <mapping name="ipaImportGroup">

    <pre>
import org.safehaus.penrose.samba.*;
if (samba.nsUniqueId != void &amp;&amp; samba.nsUniqueId != null) {
    samba.objectGUID = Samba.toBinaryGUID(samba.nsUniqueId);
}
    </pre>

    <rule name="dn">
      <expression>
return "cn="+samba.sAMAccountName+",cn=groups,cn=accounts,dc=example,dc=com";
      </expression>
    </rule>

    <rule name="objectClass">
      <constant>groupOfNames</constant>
    </rule>
    <rule name="objectClass" action="add">
      <constant>posixGroup</constant>
    </rule>
    <rule name="objectClass" action="add">
      <constant>ipaUserGroup</constant>
    </rule>
    <rule name="objectClass" action="add">
      <constant>nestedGroup</constant>
    </rule>
    <rule name="objectClass" action="add">
      <constant>extensibleObject</constant>
    </rule>

    <rule name="cn">
      <variable>samba.sAMAccountName</variable>
    </rule>
    <rule name="description">
      <variable>samba.description</variable>
    </rule>
    <rule name="member">
      <expression>
if (samba.member == void || samba.member == null) return null;
return module.transformSourceMembers(session, samba.member);
      </expression>
    </rule>

    <rule name="ntUniqueId">
      <expression>
import org.safehaus.penrose.samba.*;
return Samba.toStringGUID(samba.objectGUID);
      </expression>
    </rule>
    <rule name="sambaSID">
      <variable>samba.sambaSID</variable>
    </rule>

  </mapping>

  <mapping name="ipaSyncGroup">

    <pre>
import org.safehaus.penrose.samba.*;
if (samba.nsUniqueId != void &amp;&amp; samba.nsUniqueId != null) {
    samba.objectGUID = Samba.toBinaryGUID(samba.nsUniqueId);
}
    </pre>

    <rule name="objectClass" action="add">
      <constant>extensibleObject</constant>
    </rule>

    <rule name="description">
      <variable>samba.description</variable>
    </rule>
    <rule name="member">
      <expression>
if (samba.member == void || samba.member == null) return null;
return module.transformSourceMembers(session, samba.member);
      </expression>
    </rule>

    <rule name="ntUniqueId">
      <expression>
import org.safehaus.penrose.samba.*;
return Samba.toStringGUID(samba.objectGUID);
      </expression>
    </rule>
    <rule name="sambaSID">
      <variable>samba.sambaSID</variable>
    </rule>

  </mapping>

  <mapping name="ipaLinkGroup">

    <pre>
import org.safehaus.penrose.samba.*;
if (samba.nsUniqueId != void &amp;&amp; samba.nsUniqueId != null) {
    samba.objectGUID = Samba.toBinaryGUID(samba.nsUniqueId);
}
    </pre>

    <rule name="objectClass" action="add">
      <constant>extensibleObject</constant>
    </rule>
    <rule name="ntUniqueId">
      <expression>
import org.safehaus.penrose.samba.*;
return Samba.toStringGUID(samba.objectGUID);
      </expression>
    </rule>
    <rule name="sambaSID">
      <variable>samba.sambaSID</variable>
    </rule>

  </mapping>

  <mapping name="ipaUnlinkGroup">

    <rule name="objectClass" action="delete">
      <constant>extensibleObject</constant>
    </rule>

    <rule name="ntUniqueId" action="delete"/>
    <rule name="sambaSID" action="delete"/>

  </mapping>

</mappings>
